🧠 1. Expression

A piece of code that produces a value.
✅ Example:

2 + 3          # 5
"Hi" + "!"     # "Hi!"
len("Hello")   # 5

⚙️ 2. Statement

A complete instruction Python can execute.
✅ Example:

x = 10
print(x)


Statements can contain expressions.

🧮 3. Variable

A name that stores a value.
✅ Example:

age = 25

🧾 4. Data Types
Type	Description	Example
int	Whole number	5
float	Decimal	3.14
str	Text	"hello"
bool	True/False	True
list	Ordered, mutable collection	[1, 2, 3]
tuple	Ordered, immutable collection	(1, 2, 3)
set	Unordered, unique items	{1, 2, 3}
dict	Key–value pairs	{"name": "Alice"}
📘 5. Data Dictionary (dict)

Stores data as key–value pairs.
✅ Example:

person = {"name": "Alice", "age": 20}
print(person["name"])  # Alice

🧰 6. Function

Reusable block of code that performs a specific task.
✅ Example:

def greet(name):
    return f"Hello, {name}!"


Functions are called using parentheses:

greet("Charisse")

🧱 7. Method

A function that belongs to an object — it’s called using dot . notation.

Every data type in Python has built-in methods that operate on that object.

✅ Examples:

String methods:

text = "hello"
print(text.upper())   # 'HELLO'
print(text.capitalize())  # 'Hello'
print(text.replace("h", "H"))  # 'Hello'


List methods:

numbers = [1, 2, 3]
numbers.append(4)     # adds 4 to end
numbers.remove(2)     # removes value 2
numbers.sort()        # sorts the list
print(numbers)        # [1, 3, 4]


Dictionary methods:

user = {"name": "Alice", "age": 21}
print(user.keys())    # dict_keys(['name', 'age'])
print(user.values())  # dict_values(['Alice', 21])
print(user.get("age"))  # 21


Set methods:

a = {1, 2, 3}
a.add(4)
a.remove(2)
print(a)  # {1, 3, 4}


💡 Rule of thumb:
👉 Functions are global tools, while methods are actions that belong to a specific object.

🔄 8. Loop

Repeats code multiple times.
✅ Example:

for i in range(3):
    print(i)

🔀 9. Conditional

Runs code only if a condition is true.
✅ Example:

if age >= 18:
    print("Adult")

🧱 10. Object

Everything in Python is an object — meaning it has:

attributes (data)

methods (functions that act on it)

✅ Example:

name = "Alice"
print(name.upper())  # 'ALICE'

📦 11. Module

A separate .py file containing functions, classes, or variables.
✅ Example:

import math
print(math.sqrt(25))

📁 12. Package

A folder containing related modules (with an __init__.py file).

⚠️ 13. Exception

An error detected during execution.
✅ Example:

try:
    print(10 / 0)
except ZeroDivisionError:
    print("You can’t divide by zero.")

🧠 14. Class

A blueprint for creating objects (OOP).
✅ Example:

class Dog:
    def __init__(self, name):
        self.name = name
    
    def bark(self):
        print(f"{self.name} says woof!")

dog1 = Dog("Buddy")
dog1.bark()


Here, bark() is a method of the Dog class.

🧮 15. Operator
Type	Examples
Arithmetic	+ - * / % ** //
Comparison	== != > < >= <=
Logical	and or not
Assignment	= += -=
Membership	in, not in
Identity	is, is not
🧾 16. Keyword

Reserved words you can’t use as identifiers.
✅ Examples:

if, else, elif, for, while, def, class, try, except, True, False, None


You can view all keywords:

import keyword
print(keyword.kwlist)

🧩 Summary
Concept	Description	Example
Expression	Code that produces a value	2 + 3
Statement	Instruction that does something	x = 5
Function	Named block of code	def greet():
Method	Function tied to an object	"hi".upper()
Variable	Stores a value	name = "Charisse"
Class	Template for objects	class Dog:
Object	Instance of a class	dog1 = Dog()
Exception	Runtime error	ZeroDivisionError